"""
pycaw ‚Äî —Ü–µ –≤—É–∑—å–∫–æ—Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞, —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è –æ–¥–Ω—ñ—î—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ: –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ–ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ Windows.
pywin32 (—è–∫–∞ –≤–∫–ª—é—á–∞—î –º–æ–¥—É–ª—ñ win32api, win32gui —Ç–∞ —ñ–Ω—à—ñ) ‚Äî —Ü–µ –≤—Å–µ–æ—Ö–æ–ø–ª—é—é—á–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞, —â–æ –Ω–∞–¥–∞—î –ø—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π Windows API.

"""
from version_python import check_python_version
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume


class AudioController:
    def __init__(self):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä, –æ—Ç—Ä–∏–º—É—é—á–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞—É–¥—ñ–æ–ø—Ä–∏—Å—Ç—Ä–æ—é (–∫–æ–ª–æ–Ω–æ–∫).
        """
        try:
            self.devices = AudioUtilities.GetSpeakers()
            self.interface = self.devices.Activate(
                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            self.volume = cast(self.interface, POINTER(IAudioEndpointVolume))
            self.volume_range = self.volume.GetVolumeRange() # (-65.25, 0.0, 0.03125)
            self.min_db = self.volume_range[0]
            self.max_db = self.volume_range[1]
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—É–¥—ñ–æ–ø—Ä–∏—Å—Ç—Ä—ñ–π. {e}")
            exit(1)

    def speakers_volume_set(self, level_percent):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥—É—á–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (0-100).
        """
        if not 0 <= level_percent <= 100:
            print("–ü–æ–º–∏–ª–∫–∞: –ì—É—á–Ω—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 0 –¥–æ 100.")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–∫–∏ –≤ –¥–µ—Ü–∏–±–µ–ª–∏
        # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        db_level = self.min_db + (self.max_db - self.min_db) * (level_percent / 100.0)
        
        self.volume.SetMasterVolumeLevel(db_level, None)
        print(f"‚úÖ –ì—É—á–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {level_percent}%.")

    def speakers_current_volume(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É –≥—É—á–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (0-100).
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –≤ –¥–µ—Ü–∏–±–µ–ª–∞—Ö
        current_db = self.volume.GetMasterVolumeLevel()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–µ—Ü–∏–±–µ–ª–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∏
        # –ó–≤–æ—Ä–æ—Ç–Ω—è —Ñ–æ—Ä–º—É–ª–∞
        if current_db <= self.min_db:
            return 0
        
        percentage = ((current_db - self.min_db) / (self.max_db - self.min_db)) * 100
        return int(round(percentage))

    def speakers_is_muted(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∑–≤—É–∫ –≤–∏–º–∫–Ω–µ–Ω–æ (Mute), —ñ–Ω–∞–∫—à–µ False.
        """
        return bool(self.volume.GetMute())

    def get_microphone_status(self):
        """
        """
        try:
            devices = AudioUtilities.GetMicrophone()
            interface = devices.Activate(
                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = cast(interface, POINTER(IAudioEndpointVolume))

            if volume.GetMute() == 0:
                return "Voice"
            else:
                return "Muted"
        except Exception as e:
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞. –ü–æ–º–∏–ª–∫–∞: {e}"

    def set_microphone_mute(self, state):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω Mute –¥–ª—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
        :param state: bool, –¥–µ True -> Mute, False - —É–≤—ñ–º–∫–Ω—É—Ç–∏.
        """
        try:
            devices = AudioUtilities.GetMicrophone()
            interface = devices.Activate(
                IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = cast(interface, POINTER(IAudioEndpointVolume))
            
            # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Mute (1 - –≤–∏–º–∫–Ω—É—Ç–∏, 0 - —É–≤—ñ–º–∫–Ω—É—Ç–∏)
            mute_value = 1 if state else 0
            volume.SetMute(mute_value, None)
            
            if state:
                print("üé§üö´ –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –≤–∏–∫–ª—é—á–µ–Ω–æ.")
            else:
                print("üé§‚úÖ –ú—ñ–∫—Ä–æ—Ñ–æ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
                
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π)
            if "HRESULT: 0x80070490" in str(e):
                print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–∞–ø–∏—Å—É.")
            else:
                print(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")


class LogicAudioController:
    """
    –õ–æ–≥—ñ–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –∞—É–¥—ñ–æ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—É—á–Ω—ñ—Å—Ç—é —Ç–∞ —Å—Ç–∞–Ω–æ–º –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AudioController –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∞—É–¥—ñ–æ–ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏.
    """
    def __init__(self):
        try:
            self.Sound = AudioController()
        except SystemExit:
            # –ù–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, —è–∫—â–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ –∑–º—ñ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—å
            pass
        else:
            print("--- AudioController - OK ---")

    def send_LogicAudioController(self, command: str):
        """
        """ 
        if command.startswith("Volume set"):
            parts = command.split()
            if len(parts) == 3:
                try:
                    print("Volume set...", parts[2])
                    self.Sound.speakers_volume_set(int(parts[2]))
                except ValueError:
                    print("\n--- AudioController A - FAIL ---")
            return

        if command.startswith("Volume get"):
            try:
                print(f"Volume get... {self.Sound.speakers_current_volume()}%")
            except ValueError:
                print("\n--- AudioController B - FAIL ---")
            return

        if command.startswith("Volume status"):
            try:
                print(f"Volume mute {'Yes' if self.Sound.speakers_is_muted() else 'No'}")
            except ValueError:
                print("\n--- AudioController C - FAIL ---")
            return

        if command.startswith("Microphone mute"):
            try:
                self.Sound.set_microphone_mute(True)
            except ValueError:
                print("\n--- AudioController D - FAIL ---")
            return

        if command.startswith("Microphone unmute"):
            try:
                self.Sound.set_microphone_mute(False)
            except ValueError:
                print("\n--- AudioController E - FAIL ---")
            return

        if command.startswith("Microphone status"):
            return self.Sound.get_microphone_status()

        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {command}")

if __name__ == "__main__":

    check_python_version(3, 12)  # work on Python 3.12.1
    app = LogicAudioController()
    app.send_LogicAudioController("Volume set 50")
    app.send_LogicAudioController("Volume get")
    app.send_LogicAudioController("Volume status")
    app.send_LogicAudioController("Microphone mute")
    app.send_LogicAudioController("Microphone unmute")
    app.send_LogicAudioController("Microphone status")
    app.send_LogicAudioController("Microphone wrong command")  # Test for unknown command
    app.send_LogicAudioController("Volume wrong command")  # Test for unknown command
